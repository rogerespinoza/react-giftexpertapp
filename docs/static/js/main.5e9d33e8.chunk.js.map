{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categ","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EACjBC,mBAAS,oBADQ,mBAC9CC,EAD8C,KAClCC,EADkC,KAarD,OACE,sBAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACFN,GAAc,SAAAO,GAAK,OAAKL,GAAL,mBAAoBK,OACvCJ,EAAc,KAId,SACE,uBAAOK,KAAK,OAAOC,MAAOP,EAAYQ,SAZhB,SAAAL,GACxBF,EAAcE,EAAEM,OAAOF,Y,YCJdG,G,KAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,S,uBCPGK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UACpDF,GAFmB,+DAIFG,MAAMR,GAJJ,cAIfS,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAVjB,kBAcdY,GAdc,4CAAH,sDCKL,SAASM,EAAT,GAAgC,IAAbb,EAAY,EAAZA,SAAY,ECFjB,SAAAA,GAAa,IAAD,EACblB,mBAAS,CACjCwB,KAAM,GACNQ,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAXAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAAAC,GACrBC,YAAW,WACTJ,EAAS,CACPF,SAAS,EACTR,KAAMa,MAEP,UAEJ,CAACnB,IAEGe,EDd2BM,CAAcrB,GAAxCc,EADoC,EACpCA,QAAeH,EADqB,EAC3BL,KAEjB,OACE,qCACE,oBAAIV,UAAU,oCAAd,SAAmDI,IAElDc,EACC,mBAAGlB,UAAU,mCAAb,qBAEA,qBAAKA,UAAU,YAAf,SACGe,EAAOH,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,YEbnB,SAASY,IAAgB,IAAD,EACDxC,mBAAS,CAAC,WADT,mBAC9ByC,EAD8B,KAClB1C,EADkB,KAGrC,OACE,gCACE,8CACA,uBACA,cAACD,EAAD,CAAaC,cAAeA,IAC5B,6BACG0C,EAAWf,KAAI,SAAAR,GACd,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,W,MCT/BwB,IAASC,OACL,cAACH,EAAD,IACFI,SAASC,eAAe,U","file":"static/js/main.5e9d33e8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport Proptypes from \"prop-types\";\n\nexport default function AddCategory({ setCategories }) {\n  const [inputValue, setInputValue] = useState(\"Ingrese busqueda\");\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setCategories(categ => [inputValue, ...categ]);\n    setInputValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: Proptypes.func.isRequired,\n};\n","import React from \"react\";\nimport \"./GifGrid.css\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","export const getGifs = async category => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=hwMWReRZZy4FzJakgzhDRdbKUrwwQl9U`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport \"./GifGrid.css\";\nimport { useFetchGifts } from \"../hooks/useFetchGifts\";\n\nexport default function GifGrid({ category }) {\n  const { loading, data: images } = useFetchGifts(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading ? (\n        <p className=\"animate__animated animate__flash\">Loading</p>\n      ) : (\n        <div className=\"card-grid\">\n          {images.map(img => (\n            <GifGridItem key={img.id} {...img} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifts = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then(imgs => {\n      setTimeout(() => {\n        setState({\n          loading: false,\n          data: imgs,\n        });\n      }, 3000);\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nexport default function GifExpertApp() {\n  const [categories, setCategories] = useState([\"batman\"]);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <hr />\n      <AddCategory setCategories={setCategories} />\n      <ol>\n        {categories.map(category => {\n          return <GifGrid key={category} category={category} />;\n        })}\n      </ol>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}